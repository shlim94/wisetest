/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.wise.comp.pivotmatrix.schema.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroSummaryValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6455191575278719560L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroSummaryValue\",\"namespace\":\"com.wise.comp.pivotmatrix.schema.avro\",\"fields\":[{\"name\":\"fieldName\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"summaryType\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"count\",\"type\":\"long\"},{\"name\":\"sum\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"distinctValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"textValue\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroSummaryValue> ENCODER =
      new BinaryMessageEncoder<AvroSummaryValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroSummaryValue> DECODER =
      new BinaryMessageDecoder<AvroSummaryValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroSummaryValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroSummaryValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroSummaryValue>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroSummaryValue to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroSummaryValue from a ByteBuffer. */
  public static AvroSummaryValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String fieldName;
  @Deprecated public java.lang.String summaryType;
  @Deprecated public long count;
  @Deprecated public java.lang.String sum;
  @Deprecated public java.lang.String value;
  @Deprecated public java.util.List<java.lang.String> distinctValues;
  @Deprecated public java.lang.String textValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroSummaryValue() {}

  /**
   * All-args constructor.
   * @param fieldName The new value for fieldName
   * @param summaryType The new value for summaryType
   * @param count The new value for count
   * @param sum The new value for sum
   * @param value The new value for value
   * @param distinctValues The new value for distinctValues
   * @param textValue The new value for textValue
   */
  public AvroSummaryValue(java.lang.String fieldName, java.lang.String summaryType, java.lang.Long count, java.lang.String sum, java.lang.String value, java.util.List<java.lang.String> distinctValues, java.lang.String textValue) {
    this.fieldName = fieldName;
    this.summaryType = summaryType;
    this.count = count;
    this.sum = sum;
    this.value = value;
    this.distinctValues = distinctValues;
    this.textValue = textValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fieldName;
    case 1: return summaryType;
    case 2: return count;
    case 3: return sum;
    case 4: return value;
    case 5: return distinctValues;
    case 6: return textValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fieldName = (java.lang.String)value$; break;
    case 1: summaryType = (java.lang.String)value$; break;
    case 2: count = (java.lang.Long)value$; break;
    case 3: sum = (java.lang.String)value$; break;
    case 4: value = (java.lang.String)value$; break;
    case 5: distinctValues = (java.util.List<java.lang.String>)value$; break;
    case 6: textValue = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fieldName' field.
   * @return The value of the 'fieldName' field.
   */
  public java.lang.String getFieldName() {
    return fieldName;
  }

  /**
   * Sets the value of the 'fieldName' field.
   * @param value the value to set.
   */
  public void setFieldName(java.lang.String value) {
    this.fieldName = value;
  }

  /**
   * Gets the value of the 'summaryType' field.
   * @return The value of the 'summaryType' field.
   */
  public java.lang.String getSummaryType() {
    return summaryType;
  }

  /**
   * Sets the value of the 'summaryType' field.
   * @param value the value to set.
   */
  public void setSummaryType(java.lang.String value) {
    this.summaryType = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Long getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Long value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'sum' field.
   * @return The value of the 'sum' field.
   */
  public java.lang.String getSum() {
    return sum;
  }

  /**
   * Sets the value of the 'sum' field.
   * @param value the value to set.
   */
  public void setSum(java.lang.String value) {
    this.sum = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'distinctValues' field.
   * @return The value of the 'distinctValues' field.
   */
  public java.util.List<java.lang.String> getDistinctValues() {
    return distinctValues;
  }

  /**
   * Sets the value of the 'distinctValues' field.
   * @param value the value to set.
   */
  public void setDistinctValues(java.util.List<java.lang.String> value) {
    this.distinctValues = value;
  }

  /**
   * Gets the value of the 'textValue' field.
   * @return The value of the 'textValue' field.
   */
  public java.lang.String getTextValue() {
    return textValue;
  }

  /**
   * Sets the value of the 'textValue' field.
   * @param value the value to set.
   */
  public void setTextValue(java.lang.String value) {
    this.textValue = value;
  }

  /**
   * Creates a new AvroSummaryValue RecordBuilder.
   * @return A new AvroSummaryValue RecordBuilder
   */
  public static com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder newBuilder() {
    return new com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder();
  }

  /**
   * Creates a new AvroSummaryValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroSummaryValue RecordBuilder
   */
  public static com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder newBuilder(com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder other) {
    return new com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder(other);
  }

  /**
   * Creates a new AvroSummaryValue RecordBuilder by copying an existing AvroSummaryValue instance.
   * @param other The existing instance to copy.
   * @return A new AvroSummaryValue RecordBuilder
   */
  public static com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder newBuilder(com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue other) {
    return new com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder(other);
  }

  /**
   * RecordBuilder for AvroSummaryValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroSummaryValue>
    implements org.apache.avro.data.RecordBuilder<AvroSummaryValue> {

    private java.lang.String fieldName;
    private java.lang.String summaryType;
    private long count;
    private java.lang.String sum;
    private java.lang.String value;
    private java.util.List<java.lang.String> distinctValues;
    private java.lang.String textValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[0].schema(), other.fieldName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.summaryType)) {
        this.summaryType = data().deepCopy(fields()[1].schema(), other.summaryType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sum)) {
        this.sum = data().deepCopy(fields()[3].schema(), other.sum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distinctValues)) {
        this.distinctValues = data().deepCopy(fields()[5].schema(), other.distinctValues);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.textValue)) {
        this.textValue = data().deepCopy(fields()[6].schema(), other.textValue);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroSummaryValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[0].schema(), other.fieldName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.summaryType)) {
        this.summaryType = data().deepCopy(fields()[1].schema(), other.summaryType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sum)) {
        this.sum = data().deepCopy(fields()[3].schema(), other.sum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.distinctValues)) {
        this.distinctValues = data().deepCopy(fields()[5].schema(), other.distinctValues);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.textValue)) {
        this.textValue = data().deepCopy(fields()[6].schema(), other.textValue);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'fieldName' field.
      * @return The value.
      */
    public java.lang.String getFieldName() {
      return fieldName;
    }

    /**
      * Sets the value of the 'fieldName' field.
      * @param value The value of 'fieldName'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setFieldName(java.lang.String value) {
      validate(fields()[0], value);
      this.fieldName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldName' field has been set.
      * @return True if the 'fieldName' field has been set, false otherwise.
      */
    public boolean hasFieldName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fieldName' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearFieldName() {
      fieldName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'summaryType' field.
      * @return The value.
      */
    public java.lang.String getSummaryType() {
      return summaryType;
    }

    /**
      * Sets the value of the 'summaryType' field.
      * @param value The value of 'summaryType'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setSummaryType(java.lang.String value) {
      validate(fields()[1], value);
      this.summaryType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'summaryType' field has been set.
      * @return True if the 'summaryType' field has been set, false otherwise.
      */
    public boolean hasSummaryType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'summaryType' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearSummaryType() {
      summaryType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Long getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setCount(long value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sum' field.
      * @return The value.
      */
    public java.lang.String getSum() {
      return sum;
    }

    /**
      * Sets the value of the 'sum' field.
      * @param value The value of 'sum'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setSum(java.lang.String value) {
      validate(fields()[3], value);
      this.sum = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sum' field has been set.
      * @return True if the 'sum' field has been set, false otherwise.
      */
    public boolean hasSum() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sum' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearSum() {
      sum = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setValue(java.lang.String value) {
      validate(fields()[4], value);
      this.value = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'distinctValues' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getDistinctValues() {
      return distinctValues;
    }

    /**
      * Sets the value of the 'distinctValues' field.
      * @param value The value of 'distinctValues'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setDistinctValues(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.distinctValues = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'distinctValues' field has been set.
      * @return True if the 'distinctValues' field has been set, false otherwise.
      */
    public boolean hasDistinctValues() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'distinctValues' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearDistinctValues() {
      distinctValues = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'textValue' field.
      * @return The value.
      */
    public java.lang.String getTextValue() {
      return textValue;
    }

    /**
      * Sets the value of the 'textValue' field.
      * @param value The value of 'textValue'.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder setTextValue(java.lang.String value) {
      validate(fields()[6], value);
      this.textValue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'textValue' field has been set.
      * @return True if the 'textValue' field has been set, false otherwise.
      */
    public boolean hasTextValue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'textValue' field.
      * @return This builder.
      */
    public com.wise.comp.pivotmatrix.schema.avro.AvroSummaryValue.Builder clearTextValue() {
      textValue = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroSummaryValue build() {
      try {
        AvroSummaryValue record = new AvroSummaryValue();
        record.fieldName = fieldSetFlags()[0] ? this.fieldName : (java.lang.String) defaultValue(fields()[0]);
        record.summaryType = fieldSetFlags()[1] ? this.summaryType : (java.lang.String) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Long) defaultValue(fields()[2]);
        record.sum = fieldSetFlags()[3] ? this.sum : (java.lang.String) defaultValue(fields()[3]);
        record.value = fieldSetFlags()[4] ? this.value : (java.lang.String) defaultValue(fields()[4]);
        record.distinctValues = fieldSetFlags()[5] ? this.distinctValues : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.textValue = fieldSetFlags()[6] ? this.textValue : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroSummaryValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroSummaryValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroSummaryValue>
    READER$ = (org.apache.avro.io.DatumReader<AvroSummaryValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
